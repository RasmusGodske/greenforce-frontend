# Copyright 2021 Energinet DataHub A/S
#
# Licensed under the Apache License, Version 2.0 (the "License2");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: GreenForce Frontend CI

env:
  BASE_BRANCH: ${{ github.event.pull_request.base.ref }}
  is-main-branch: ${{ github.ref == 'refs/heads/main' }}
  is-pull-request: ${{ github.event_name  == 'pull_request' }}
  NODE_OPTIONS: --max_old_space_size=6144
  node-version: 14.x
  NX_MAX_PARALLEL: 2

  # Nx Cloud
  NX_BRANCH: ${{ github.event.number }}
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  NX_RUN_GROUP: ${{ github.run_id }}

  # DH E2E
  DH_E2E_USERNAME: ${{ secrets.DH_E2E_USERNAME }}
  DH_E2E_PASSWORD: ${{ secrets.DH_E2E_PASSWORD }}

on:
  push:
    branches:
      - main
    paths-ignore:
      - apps/dh/api-dh/**
      - .github/workflows/api-dh-app-*.yml
  pull_request:
    paths-ignore:
      - apps/dh/api-dh/**
      - .github/workflows/api-dh-app-*.yml
  workflow_dispatch: {}

jobs:
  dh-affected:
    if: ${{ github.event_name  == 'pull_request' }}
    name: Is DataHub affected?
    runs-on: ubuntu-latest

    outputs:
      is-affected: ${{ steps.affected.outputs.is-affected }}

    steps:
      # needed for nx affected command
      - name: Check out source code with current branch Git history
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      # needed for nx affected command
      - name: 'PR: Fetch base branch Git history'
        if: ${{ env.is-pull-request == 'true' }}
        run: git fetch --no-tags origin $BASE_BRANCH

      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.node-version }}

      - name: Variable-Yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache Yarn cache directory
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-node-${{ env.node-version }}-yarn-${{
            hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.node-version }}
            ${{ runner.os }}
      - name: Disable workspace NGCC run
        uses: ./.github/actions/setup-postinstall
        with:
          ngcc: false
      - name: Install package dependencies
        run: yarn install --frozen-lockfile --non-interactive

      - name: Is affected?
        id: affected
        uses: ./.github/actions/affected
        with:
          base: ${{ env.is-main-branch == 'true' && 'HEAD~1' || format('origin/{0}', env.BASE_BRANCH) }}
          project: app-dh

  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      # needed for nx affected command
      - name: 'PR: Check out source code with current branch Git history'
        if: ${{ env.is-pull-request == 'true' }}
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
      # needed for nx affected command
      - name: 'PR: Fetch base branch Git history'
        if: ${{ env.is-pull-request == 'true' }}
        run: git fetch --no-tags origin $BASE_BRANCH
      - name: 'Merge: Check out source code'
        if: ${{ env.is-pull-request == 'false' }}
        uses: actions/checkout@v2

      - name: Set up Node.js ${{ env.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.node-version }}

      - name: Variable-Yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache Yarn cache directory
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-node-${{ env.node-version }}-yarn-${{
            hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.node-version }}
            ${{ runner.os }}
      - name: Install package dependencies
        run: yarn install --frozen-lockfile --non-interactive

      - name: 'PR: Production build of affected products'
        if: ${{ env.is-pull-request == 'true' }}
        run: yarn affected:build --base=origin/$BASE_BRANCH
          --max-parallel=$NX_MAX_PARALLEL
      - name: 'Merge: Production build of all products'
        if: ${{ env.is-pull-request == 'false' }}
        run: yarn build --max-parallel=$NX_MAX_PARALLEL

  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v1.6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  e2e:
    name: End-to-end test
    needs: dh-affected
    runs-on: ubuntu-latest

    steps:
      # needed for nx affected command
      - name: 'PR: Check out source code with current branch Git history'
        if: ${{ env.is-pull-request == 'true' }}
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
      # needed for nx affected command
      - name: 'PR: Fetch base branch Git history'
        if: ${{ env.is-pull-request == 'true' }}
        run: git fetch --no-tags origin $BASE_BRANCH
      - name: 'Merge: Check out source code'
        if: ${{ env.is-pull-request == 'false' }}
        uses: actions/checkout@v2

      - name: Set up Node.js ${{ env.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.node-version }}

      - name: Variable-Yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache Yarn cache directory
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-node-${{ env.node-version }}-yarn-${{
            hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.node-version }}
            ${{ runner.os }}
      - name: Install package dependencies
        run: yarn install --frozen-lockfile --non-interactive
      - name: Install Playwright
        run: npx playwright install --with-deps
      - name: 'DH: Start API'
        if: ${{ env.is-main-branch == 'true' || needs.dh-affected.outputs.is-affected == 'true' }}
        run: |
          yarn nx run api-dh:ci-configuration
          yarn nx serve api-dh:serve:ci

      - name: 'PR: End-to-end test affected products'
        if: ${{ env.is-pull-request == 'true' }}
        run: yarn affected:e2e --configuration=ci --base=origin/$BASE_BRANCH
          --max-parallel=$NX_MAX_PARALLEL
      - name: 'Merge: End-to-end test all products'
        if: ${{ env.is-pull-request == 'false' }}
        run: yarn e2e --configuration=ci --max-parallel=$NX_MAX_PARALLEL

  format:
    name: 'PR: Format'
    if: ${{ github.event_name  == 'pull_request' }}
    runs-on: ubuntu-latest

    steps:
      # needed for nx affected command
      - name: Check out source code with current branch Git history
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
          ssh-key: ${{ secrets.ACTIONS_BOT_SSH_KEY }}
      # needed for nx affected command
      - name: Fetch base branch Git history
        run: git fetch --no-tags origin $BASE_BRANCH

      - name: Set up Node.js ${{ env.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.node-version }}

      - name: Variable-Yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache Yarn cache directory
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-node-${{ env.node-version }}-yarn-${{
            hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.node-version }}
            ${{ runner.os }}
      - name: Disable Angular Compatibility Compiler
        uses: ./.github/actions/setup-postinstall
        with:
          ngcc: false
      - name: Install package dependencies
        run: yarn install --frozen-lockfile --non-interactive
      - name: Revert postinstall changes
        run: git reset --hard

      - name: Format projects and configuration files
        run: yarn format --base=origin/$BASE_BRANCH

      - name: Commit formatted files
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A || cd .
          git commit -m "style: format" || cd .
          git push origin --force-with-lease || cd .
      - name: Check formatting of projects and configuration files
        run: yarn format:check --base=origin/$BASE_BRANCH

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      # needed for nx affected command
      - name: 'PR: Check out source code with current branch Git history'
        if: ${{ env.is-pull-request == 'true' }}
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
          ssh-key: ${{ secrets.ACTIONS_BOT_SSH_KEY }}
      # needed for nx affected command
      - name: 'PR: Fetch base branch Git history'
        if: ${{ env.is-pull-request == 'true' }}
        run: git fetch --no-tags origin $BASE_BRANCH
      - name: 'Merge: Check out source code'
        if: ${{ env.is-pull-request == 'false' }}
        uses: actions/checkout@v2

      - name: Set up Node.js ${{ env.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.node-version }}

      - name: Variable-Yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache Yarn cache directory
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-node-${{ env.node-version }}-yarn-${{
            hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.node-version }}
            ${{ runner.os }}
      - name: Disable Angular Compatibility Compiler
        uses: ./.github/actions/setup-postinstall
        with:
          ngcc: false
      - name: Install package dependencies
        run: yarn install --frozen-lockfile --non-interactive
      - name: Revert postinstall changes
        run: git reset --hard

      - name: 'PR: Fix affected projects using lint rules'
        if: ${{ env.is-pull-request == 'true' }}
        run: yarn affected:lint:fix --base=origin/$BASE_BRANCH --max-parallel=$NX_MAX_PARALLEL
      - name: 'PR: Commit fixed files'
        if: ${{ env.is-pull-request == 'true' }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A || cd .
          git commit -m "style: lint" || cd .
          git push origin --force-with-lease || cd .
      - name: 'Merge: Lint workspace and all projects'
        if: ${{ env.is-pull-request == 'false' }}
        run: yarn lint --max-parallel=$NX_MAX_PARALLEL

  test:
    name: Unit and integration test
    needs: dh-affected
    runs-on: ubuntu-latest

    steps:
      # needed for nx affected command
      - name: 'PR: Check out source code with current branch Git history'
        if: ${{ env.is-pull-request == 'true' }}
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
      # needed for nx affected command
      - name: 'PR: Fetch base branch Git history'
        if: ${{ env.is-pull-request == 'true' }}
        run: git fetch --no-tags origin $BASE_BRANCH
      - name: 'Merge: Check out source code'
        if: ${{ env.is-pull-request == 'false' }}
        uses: actions/checkout@v2

      - name: Set up Node.js ${{ env.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.node-version }}

      - name: Variable-Yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache Yarn cache directory
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-node-${{ env.node-version }}-yarn-${{
            hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.node-version }}
            ${{ runner.os }}
      - name: Install package dependencies
        run: yarn install --frozen-lockfile --non-interactive

      - name: 'DH: Start API'
        if: ${{ env.is-main-branch == 'true' || needs.dh-affected.outputs.is-affected == 'true' }}
        run: |
          yarn nx run api-dh:ci-configuration
          yarn nx serve api-dh:serve:ci

      - name: 'PR: Test affected projects'
        if: ${{ env.is-pull-request == 'true' }}
        run: yarn affected:test --base=origin/$BASE_BRANCH
          --max-parallel=$NX_MAX_PARALLEL
      - name: 'Merge: Test all projects'
        if: ${{ env.is-pull-request == 'false' }}
        run: yarn test --max-parallel=$NX_MAX_PARALLEL
